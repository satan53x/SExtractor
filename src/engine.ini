; [Engine_AST]
; file=bin
; postfix=.adv
; contentSeparate="\x0D\x0A"
; sample="""<WINDOW NAME=\"春臣\" IMAGE=\"name01.png\">
; 「ちょっ……待って…………！」

; <WINDOW>
; 真冬と夏実さんの動きは素速く……。
; """
; [Engine_AST_utf8]
; file=txt
; postfix=.adv
; sample="""<WINDOW NAME=\"春臣\" IMAGE=\"name01.png\">
; 「ちょっ……待って…………！」

; <WINDOW>
; 真冬と夏実さんの動きは素速く……。
; """
[Engine_ANIM]
file=bin
postfix=.dat
contentSeparate="(\x00+)"
regDic=2
sample="""00_skip=^\\x00
01_skip=^[\\S\\s]{0,1}$
10_search=^w\\d+(?P<name>[a-z])$
11_skip=^[^\\x81-\\xFE@\[]
20_search=^(.+?)$
checkJIS=[ -~]
ignoreDecodeError=1
dontImportName=1
extraData=guessName
<guessName会自动猜测，转换变量名到人名>
"""

[Engine_Artemis]
file=txt
postfix=.ast
sample="""text={
    [1]={
        name={name=\"舞雪\", ja=\"？？？\"},
        ja={
            {
                \"「――愛してる」\",
            },
        },
    },
"""
; [Engine_Artemis_1]
; file=txt
; postfix=.txt
; sample="""[背景 file=\"BG_まよカフェ_夜\"]

; [すもも 表示=\"女の子\" v=\"sumo_0003\"]
; 「あ、あれれ？　
; もも、なにかまちがえちゃったですか？」

; """
[Engine_AZSystem]
file=bin
postfix=.asb
contentSeparate=
regDic=2
sample="""10_search=^(.+)$
version=0

<version目前支持0,1,2>
<仍然失败可以自行观察asb字节，并在脚本中修改为对应操作数>
"""
[Engine_BlackRainbow]
file=bin
postfix=
contentSeparate=
regDic=2
sample="""00_skip=^$
10_search=^(?P<name>【.+】)\\r\\n([\\s\\S]+)$
15_search=^([\\s\\S]+)$
extraData=\\x2B\\xC5\\x2A\\x3D

<原文含有\\r\\n，则需要修改设置页面段落分隔符为其他字符串（如⚡）>
<extraData为密钥>
"""
[Engine_BlueGale_bdt]
file=bin
postfix=.bdt
contentSeparate="\x0D\x0A"
regDic=2
sample="""01_skip=^\\s*[($%#]
10_search=^V[0-9A-Z]+\\s*!(?P<name>[^\\s]+?)\\s*\"(.+?)$
11_search=^\\s*!(?P<name>[^\\s]+?)\\s*\"(.+?)$
15_search=^\\s*\"(.+?)$
20_search=^\\s*QP([^,]+),([^,]+),([^,]+)$
21_search=^\\s*QP([^,]+),(.+?)$
decrypt=1
extraData=exportIndex
pureText=1
<decrypt=1解密, 默认encrypt=1加密>
"""
;;;;;"
[Engine_CScript]
file=bin
postfix=
contentSeparate=
regDic=2
sample="""01_skip=^$
10_search=(?P<unfinish>.+)\\\\n|(?<=\\\\n)(.+)$
15_search=^([\\S\\s]+)$
struct=para
extraData=compress,fixJump
version=0

<建议启用纯文本模式，或者去掉10_search>
<extraData=compress,fixJump用于修正无分支的跳转>
<ctrlStr=[None,None,None,[None,0x15],None]可以配置对话,选项,分支跳转,普通跳转,条件跳转，None表示追加>
<version=0为自动，其他暂时支持1,10,11>
"""
[Engine_CSV]
file=txt
contentSeparate=","
postfix=
regDic=2
sample="""00_skip=^$
10_search=^([\\S\\s]+)$
extractKey=^(表示名|説明|説明文|ラベル|初期テキスト|名前候補)(\\.\\d+){0,1}$
postSkip=^[ -~]
separate=\\t

<extractKey为列名的正则匹配>
<当extraData为nohead或者useIndex时，extractKey为列序号列表，如：1,name2,3>
<pureText=1仅用于无法解析的非标准csv，writeOffset无效，正常不推荐启用>
"""
[Engine_Cyberworks]
file=bin
postfix=.a0
contentSeparate=
regDic=2
sample="""00_skip=^$
10_search=^【(?P<name>.+?)】
15_search=^(?P<unfinish>.+)
structure=paragraph

<默认编码为UTF-16>
"""
[Engine_EAGLS]
file=bin
postfix=
contentSeparate="\x0D\x0A"
regDic=2
sample="""00_skip=^$
01_skip=^[_]
10_search=&\\d+?\"([^\"]+?)\"|#(?P<name>[^&=0-9]+)
11_search=\"_SelStr\\d\",\"([^\"]+?)\"
startline=1
"""
[Engine_FVP]
file=bin
postfix=.hcb
contentSeparate=""
regDic=2
sample="""extraData=2000,C37E0,080808021A2009000E

<名字段结束地址,消息段开始地址,unfinish跟随字节流>
"""
[Engine_GSD]
file=bin
postfix=
contentSeparate=""
regDic=2
sample="""00_skip=^$
10_search=^([\\S\\s]+?)$
extractKey=\\x00(select.spt|dialog.spt)\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF
version=1
keepBytes=[\\x05\\x08\\x09\\x0A\\x0B][\\x00-\\x7F]{2}(?!\\x00)
extraData=guessEnd
<spt需要先用GSDTools进行decode；仅支持v2提取，v3请使用GSDTools提取>
<global.dat和spt放到一起，extractKey参数用于搜索选项等字符串>
<version允许1 2 3>
<endStr=0xA设置文本结束指令，ctrlStr=5设置可能的文本内指令>
"""
[Engine_GxEngine_mwb]
file=bin
postfix=.mwb
contentSeparate=""
regDic=2
sample="""01_skip=^[ -~]*$
02_skip=^([A-Z]{2,}|@)
03_skip=_
10_search=^(?P<name>.{1,10}?)(「[\\S\\s]+?)$
20_search=^([\\S\\s]+?)$
separate=([\\x08\\x05]\\x1A\\x00\\x00[\\x00-\\x02][\\x00-\\xFF])
encrypt=1

<\\x05是控制字符串，怕翻译报错可以和\\x08分开提取>
<测试游戏为`シロウト家出娘と俺 Sweet Days`>
"""
[Engine_Kaguya]
file=bin
postfix=.ARC
contentSeparate=""
regDic=2
;10_search=(?P<unfinish>.+)
sample="""extraData=fixLength,exportAri

<用于TBLSTR.ARC>
"""
[Engine_Kaguya_dat]
file=bin
postfix=.dat
contentSeparate=""
regDic=2
sample="""00_skip=^[a-zA-Z]
10_search=^([\\S\\s]+?)$

<用于message.dat的版本02和03>
"""
; [Engine_Krkr]
; file=txt
; postfix=
; sample="""[name text=\"ターニャ\"]
; [voice id=\"tny\" file=\"vf00_000tny0001\"]
; 「むーっ……むむーっ……」
; [tp]

; """
[Engine_Krkr_Reg]
file=txt
postfix=
regDic=2
sample="""01_skip=^[*;]
10_search=^\\[cv.+?name=(?P<name>.+?)\\]
11_search=^\\[msgname.+?name=(?P<name>.+?)\\]
12_search=^\\[blink .*?text=\"(.+?)\"
endStr=np
ctrlStr=^[A-Za-z]

<只匹配名字或选项，其它行由脚本处理，按[]分割。>
<只有以上skip或search匹配成功，或脚本发现[np]时才表示段落结束>
<^[A-Za-z]表示控制段不提取>
"""
;00_skip=^$
;02_skip=^\\[(?!cv|msgname|blink )
[Engine_MED]
file=bin
postfix=
contentSeparate="\x00"
regDic=2
sample="""05_skip=^[ -~]
10_search=^【(?P<name>.+?)】$
20_search=^(?P<start_unfinish>「.*?[^」]\\s*)$
21_search=^(?P<end_unfinish>.*?」\\s*)$
30_search=^(.+?)$
pureText=1
"""
[Engine_MoonHir]
file=bin
postfix=
contentSeparate="\x00"
regDic=2
sample="""00_skip=^[A-Za-z0-9\\[%]
01_skip=^$
10_search=^(?P<unfinish>.+)$
structure=paragraph

"""
[Engine_NekoSDK]
file=bin
postfix=.txt
contentSeparate=""
regDic=2
sample="""10_search=^([\\S\\s]+)$

<原文含有\\r\\n，则需要修改设置页面段落分隔符为其他字符串（如⚡）>
<未提取选项>
"""
;\\x3F\\x00\\x00\\x00中年の──\r\nここの店主だろう男が笑顔を張り付けて近付いてくる。
[Engine_Nexas_asm]
file=txt
postfix=.asm
regDic=2
sample="""01_skip=^[^\\t]+\\t(?!LOAD_STRING|LOAD_CUSTOM_TEXT|SPECIAL_TEXT)
02_skip=(\\.[a-z]{1,5}|')'$
03_skip=^[^']+'[!-~]+'$
04_skip=^[^']+'(Stage)
10_search=^[^']+'(?P<name>[^\\t\\r\\n -~]{1,8})'$
15_search=(?P<unfinish>[^\\t\\r\\n -~]+)
20_search=^[^']+'(.+)'$
extraData=[\"PUSH\",\"(?P<name>LOAD_STRING)\",\"LOAD_STRING\"]
struct=para

<先使用tools/Nexas转bin为asm>
<extraData是json字符串，用于校验name的上下几行>
"""

[Engine_RealLive]
file=bin
postfix=.txt
contentSeparate=
regDic=2
sample="""00_skip=^\\s*$
10_search=^【(?P<name>.+?)】([\\S\\s]+)$
20_search=^([\\S\\s]+?)$
extraData=fixNote,fixLinebreak,checkPos
decrypt=6

<decrypt处理二次加密，值是GameType，配置在tools/RealLive/seen_fix.py里>
<fixNote,fixLinebreak分别处理掉原有注音和换行，换行默认会换为<n>，译文中允许额外增加换行>
<仅针对arc_conv解包后的txt>
<version=1 可选1,2,3,4,5>
"""

[Engine_RPGMV]
file=json
postfix=.json
contentSeparate=",",":"
regDic=2
sample="""00_skip=^<[^>]+?>$
01_skip=^<(?!code)
10_search=^<code102>([\\S\\s]+)$
15_search=^<code401> ?(?P<name>[\\S\\s]+)：$
16_search=^<code401>(?P<unfinish>[\\S\\s]+)$
20_search=^<.+?>([\\S\\s]+)$
extractKey=name,description,nickname
<RPGMV会在每行开头加上控制段以便进行分段处理，控制段<...>不要提取出来>
<extractKey=!name,nickname开头加!表示反选，提取指定之外的所有keys>
<推荐Map里的对话文本和其他的json分开提取，用不同的正则方便处理>
"""
[Engine_RPGVX]
file=json
postfix=.json
contentSeparate=",",":"
regDic=2
sample="""00_skip=^<[^>]+?>$
01_skip=^<(?!code)
10_search=^<code102>([\\S\\s]+)$
15_search=^<code401>\\\\C\\[\\d\\]\\[(?P<name>.+?)\\]\\\\C\\[\\d\\]$
16_search=^<code401>(?P<unfinish>[\\S\\s]+)$
20_search=^<.+?>([\\S\\s]+)$
extractKey=none
<请先使用tools/RPGMakerVX文件夹下工具将rvdata转为json>
<Key:name,description,nickname,note,message1,message2,message3,message4>
<推荐Map里的对话文本和其他的json分开提取，用不同的正则方便处理>
"""
[Engine_RenPy]
file=txt
postfix=
regDic=2
sample="""00_skip=^\\s*[#]
01_skip=^\\s*(?:translate |old |voice )
10_search=^    (?:new|centered) \"(.+)\"
11_search=^    \"?(?P<name>[^\"]+?)\"? \"(.+)\"
20_search=^    \"(.+)\"

<extraData= \"\"$| \"\" 用于匹配需要复制上一句的句子>
"""
;;;;"
[Engine_ScrPlayer]
file=bin
postfix=.scr
contentSeparate=
regDic=2
sample="""00_skip=^$
20_search=^([\\S\\s]+?)\\n?$
extraData=fixOrig
version=0

<version默认为0表示尝试所有，其他允许值:1 2 3 4>
"""
; [Engine_SiglusEngine]
; file=txt
; postfix=.txt
; sample="""配合SiglusTools使用: dump ss (copy text)
; """
; nameList="マナ,謙太,みお,かなで,ここね,タカシ,まこと,男子Ａ,男子Ｂ,男子Ｃ,女生徒,教師,女の子,父親,男子生徒,男Ａ,男Ｂ,男Ｃ,ＡＶ女優"
[Engine_Silky_map]
file=bin
postfix=
contentSeparate=
regDic=2
sample="""10_search=^\\x14([\\S\\s]+)\\x00{2}$
extractKey=3
keepBytes=\\x00\\x1A\\x00\\x14

<extractKey是需要处理的分区序号>
<仅适配特定的多国语言版本MAP文件>
"""
[Engine_SystemC]
file=bin
postfix=
contentSeparate="\r\n"
sample="""男子達　（８００３）　男子Ａ
「うおおおおぉぉぉいくイク行っちゃうううぅ～！！！」
"""
; [Engine_TXT_Paragraph]
; file=txt
; postfix=
; regDic=2
; sample="""00_skip=^$
; 01_skip=^[ -~]
; 10_search=^(?P<unfinish>.+)$
; extraData=^[「（]
; """
[Engine_TmrHiro]
file=bin
postfix=
regDic=2
sample="""00_skip=^$
10_search=^(?! d)(?P<name>[^,]+),([^,]+),[a-zA-Z0-9_]+$
11_search=^(?! d)(?P<name>[^,]+),([^,]+)$
15_search=^(?! d)([\\S\\s]+)$
20_skip=^(?! d)
21_search= d([^,]+),[a-zA-Z0-9_]+
extraData=^(.+)$
pureText=1
<extraData在提取macro脚本时使用>
"""
[Engine_Unity_dat]
file=bin
postfix=
contentSeparate=""
regDic=2
sample="""10_search=^(?P<pre_name>「[\\S\\s]+)$
20_search=^([\\S\\s]+?)$
separate=([\\r\\n\\x20-\\x7F\\xE0-\\xEF][\\r\\n\\x20-\\xEF]+)
ignoreDecodeError=1
postSkip=^[ -~]+$
struct=para

<提取Unity的mono dat，目标框架为UTAGE>
"""
[Engine_WillPlus]
file=bin
postfix=.ws2
contentSeparate="(%L|char\\0|\\x01\\x0F|\\x00\\x0F)"
sample="""%LF雪乃
char\\0「起きて…ねえ起きて……」%K%P
"""
[Engine_Xlsx]
file=bin
postfix=
regDic=2
sample="""10_search=^([\\S\\s]+?)$
extractKey=name1,2
extraData=useIndex
"""
[Engine_Yuris]
file=bin
postfix=.ybn
contentSeparate=
regDic=2
sample="""01_skip=^M[\\S\\s]{2}\"(?=[^\\x81-\\xEF]|■|◆)
10_search=^M[\\S\\s]{2}\"(.+?)\"
15_skip=^[A-Z][\\x00-\\xFF][\\x00-\\x04]
20_search=^(?P<name>.{1,20}?)(「.+」)$
21_search=^(?P<name>.{1,20}?)(（.+）)$
25_search=^(.+)$
decrypt=auto
extraData=9

<如果提取内容为空请尝试把ysc.bin放入工作目录>
<decrypt为auto是自动解密，也可以指定密钥，如果已解密则删除decrypt这一行>
<extraData=9表示按参数个数过滤文本，最小为1；选项或人名提取不到时尝试调小该值>
<extraData=all时，设置中打开debug log可以查看对应指令的打印>
<version=0表示自动读取版本>

"""
;";注释

[Engine_TXT]
file=txt
postfix=
regDic=1
nameList=""
[Engine_BIN]
file=bin
contentSeparate="\x0D\x0A"
postfix=
regDic=1
nameList=""
[Engine_JSON]
file=json
encode=utf-8
postfix=.json
contentSeparate=",",":"
regDic=1

; [Engine_Custom]
; file=bin
; postfix=
; regDic=2
; contentSeparate="\r\n"
; sample="""自定义脚本
; """

;支持的导出格式:
[OutputFormat]
format00="json { orig:\"\" }"
format01="json { orig:orig }"
format02="json [ {name,msgRN} ]"
format03="json { origRN:\"\" }"
format04="json { origRN:origRN }"
format05="txt  { orig }"
format06="txt  [ origRN ]"
format07="json [ origRN ]"
format08="xlsx { orig:\"\" }"
format09="txt  [ ☆origRN ★origRN ]"
format10="json [ {name:name,msgRN:msgRN} ]"
format11="json [ {origRN:origRN} ]"
