[AST]
00_skip="^$"
01_skip="^[;*]"
10_search="<WINDOW .*?NAME=\"(?P<name>.+?)\""
11_search="<SELECT TEXT=\"(.+?)\""
15_skip="^(?:<[^<>]+>)+$"
20_search="(?P<unfinish>[^<>]+)"
postSkip="^[A-Z;]"
;pureText=1
structure=paragraph
sample="""<WINDOW NAME=\"春臣\" IMAGE=\"name01.png\">
「ちょっ……待って…………！」
"""

[Artemis]
00_skip="^\\s*[*/]"
01_skip="^\\s*\\[(?!name|sel_text)"
02_skip="^\\s*$"
10_search="^\\[name (?P<name>.+?)\\]"
11_search="^\\[sel_text.*text=\"(.+?)\""
12_search="^(?P<unfinish>.+)$"
structure=paragraph
sample="""
[name 野真口]
「ここか……」

<段落结构下匹配顺序按类型优先>"""

[Artemis_1]
00_skip=^$
01_skip="^\\s*(?!\\s|\"|name|{\"rt2\"|{\"txruby\")"
;;;;;;"
15_search="^\\s*name = {\".+?\", \"(?P<name>.+?)\"}"
16_search="^\\s*name = {\"(?P<name>.+?)\"}"
20_search="^\\s*\"(?P<unfinish>.+?)\""
structure=paragraph
sample="""
    {
        name = {"虎鉄", "少年"},
        "「んっ……？　開かない？」",
        {"rt2"},
    },
"""

[Cyberworks_JIS]
00_skip="^$"
10_search="^(?P<name>【.+?】)"
;14_search=^(?P<unfinish>[\x40-\xFD]+?)\xFF\xFF[\x01-\x39](?P<unfinish2>[\x40-\xFD]+?)[\x01-\x39](?P<unfinish3>[\x40-\xFD]+?)$
15_search="^(?P<unfinish>[\\S\\s]+?)[\\xFE]{0,1}$"
structure=paragraph
extraData=readJIS
sample="""
<读取旧版JIS，本预设不处理控制段，提取后请自行处理\\u>
<GBK写入不能保留控制段，需要保留请使用JIS隧道或替换，或修改提取正则在提取时排除>
"""

[CSV_Livemaker]
00_skip="^$"
10_search="^【(?P<name>.+?)】|(?P<unfinish>.+)\\n|(.+)$"
extractKey="^Original text$"
writeOffset=1
pureText=0
;separate="\t"
;sample="""<强制禁用纯文本模式>"""

; [TBLSTR_ARC]
; 10_search="^([\\0-\\xFF]{2,})$"
; separate="\\xFF"
; checkJIS="[\\n]"
; flag="ignoreDecodeError"
; sample="""
; <日文仅允许双字节，单字节符号按匹配>"""

[EntisGLS]
00_skip=^\"[\\x00-\\x7F]
;\";注释
01_search=^\"(.*[。！…？「」、『―].*)\"$
sample="""
TXT二次提取去除控制文本，如果之前不是Tiny需要去掉首尾引号"""

[Krkr]
00_skip="^\\s*[;#/]"
01_search="^【(?P<name>.*?)】(.+)$"
02_search="^(.+)$"
sample="""
#voice snk0096
【悠】「……ごくり」"""

[Krkr_1]
00_skip="^[*;]"
01_skip="^\\[(?!ns|sel)"
;02_search="^\\[ns\\](?P<name>.+?)\\[nse\\]$"
02_search="^\\[ns\\]【(?P<name>.+?)】\\[nse\\]$"
03_search="^\\[sel\\d+ text=\\'(.+?)\\'"
04_search="^(?P<unfinish>.+?)\\[r\\]$"
05_search="^(.+?)\\[pcms\\]$"
sample="""
[ns]【哲也】[nse]
「……さて、そろそろ行くか」[pcms]"""

[Krkr_Orcsoft]
01_skip="^[*;]"
02_skip="^\\[(?!￥|名前|「|（)"
10_search="^\\[名前.+?id=【(?P<name>.+?)】"
endStr="￥"
ctrlStr="^[A-Za-z]|^シンボル|^――$|^「|^（"
sample="""
[名前 id=【？？】 file=m0001]
[「]隆彦さん、隆彦さん……」
[￥]
"""

[_BIN_Nexas]
;00_search=^(单字符名字)$
01_skip="^[\\S\\s]{0,3}$"
02_skip="^[^@\\x81-\\xFC]"
10_search="^[0-~]*(?P<pre_name>「[ 0-\\xFC]+?)$"
20_search="^[0-~]*([\\x81-\\xFC][ 0-\\xFC]+?)$"
postSkip="_.*[^」a-zA-Z]$|[0-9]$"
checkJIS="[ 0-~]"
ignoreDecodeError=1
separate="\\x00"
struct="para"
sample="""
<暴力匹配，日文仅允许双字节，每行结尾限定字符>
"""

[_BIN_RealLive]
00_skip="[^\\x40-\\xFE\\x0A]{2}$"
10_search="\\x40[\\x00-\\xFF][\\x00-\\x3F]【(?P<name>[\\x40-\\xFE]+?)】([\\x40-\\xFE\\x0A]*)$"
11_search="\\x40[\\x00-\\xFF][\\x00-\\x3F]([\\x40-\\xFE\\x0A]+)$"
20_search="^【(?P<name>[\\x40-\\xFE]+?)】([\\x40-\\xFE\\x0A]*)$"
21_search="^([\\x40-\\xFE\\x0A]{4,})$"
;checkJIS=
ignoreDecodeError=1
separate="\\x23\\x00"
sample="""<引擎选RealLive时不要用这个正则，这是BIN暴力提取用的，RealLive引擎提取不到时才用这个>
<暴力匹配文本需要截断，如果需要变长，推荐在脚本解密后用VNT提取>
<仅匹配全角日文, 单个文件文本序号不超0x4040>"""
[_BIN_RealLive_Selection]
00_skip="^(?!\\x29\\x32\\x29|\\x29\\x7B\\x0A)"
11_search="^\\x29\\x32\\x29([\\x40-\\xFE]+?)\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A"
12_search="^\\x29\\x32\\x29([\\x40-\\xFE]+?)\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A"
13_search="^\\x29\\x32\\x29([\\x40-\\xFE]+?)\\x0A"
21_search="^\\x29\\x7B\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A"
22_search="^\\x29\\x7B\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A"
23_search="^\\x29\\x7B\\x0A[\\s\\S]{2}([\\x40-\\xFE]+?)\\x0A"
separate="(\\xFF[\\s\\S]\\0\\0\\0)"
sample="""<仅提取选项，每个结构最多三项>"""
[RenPy]
00_skip="^\\s*[#]"
01_skip="^\\s*(?:translate |old |voice )"
10_search="^\\s*new \"(.+)\"$"
11_search="^\\s*\"?(?P<name>[^ \"]+?)\"? \"(.+)\"$"
;;;;;"
20_search="^\\s*\"(.+)\"$"

[RPGMV_RPGVX_System]
00_skip="^<.+?>$"
01_skip="^<code"
02_skip="^<(?=bgm|bgs|se|battleb)"
20_search="^<.+?>([^ -~][\\S\\s]*)$"
postSkip="_"
extractKey="all"
[RPGVX_RPGMV_NotMap]
00_skip="^<.+?>$"
01_skip="^<code"
02_skip="^<(?=bgm|bgs|se|battleb)"
20_search="^<.+?>([^ -~][\\S\\s]*)$"
postSkip="_"
extractKey="name,description,nickname,note,message1,message2,message3,message4"
[SFA_AOS]
00_skip="^\\s*[#:ac-zA-Z0-9^%]"
01_skip="^$"
10_search="^\\s*btnset.*?\"slctwnd\".*?\"(.+?)\""
11_skip="^\\s*b"
20_search="^\\[(?P<name>.+?)\\](.+)$"
21_search="^(.+)$"
;pureText=1
sample="""
cvon( \"ba0000\" )
[？？？]「鏑木亮様でお間違いないでしょうか」
<使用BIN引擎时需要勾选纯文本模式>"""
[Valkyria_dat_txt]
00_skip="^$"
10_search="^【(?P<name>.+?)】"
11_search="^　(?P<predel_unfinish>.+)$"
15_search="^(.+)(?<=」|）)$"
16_search="^(?P<unfinish>.+)$"
structure=paragraph
postSkip=^\\\\u
sample="""<tiny提取为txt后进行二次提取>"""
[Valkyria_odn]
00_skip="^$"
01_skip="^(?!【|%SetMessage|%SetSelect)"
10_search="^【(?P<name>.+?)】"
15_skip="^(?=【)"
20_search="(?P<unfinish>(?:[\\x81-\\xFE].)+)"
structure=paragraph
sample="""
%SetMessage( \"/s――この物語に描かれているオナニーは、/r/s全て実践可能である――\", 255, 255, 255 );"""

[Yuris_txt]
00_skip="^[/#*]|^【"
01_skip="^\\\\(?!VO|SEL\\()"
;02_search="^.*\\(ID:\\d+\\)【.+?＠(?P<name>.+?)】(?P<msg>.+)$"
03_search="^.*\\(ID:\\d+\\)(?P<name>【.+?】)(?P<msg>.+)$"
04_search="^.*\\(ID:\\d+\\)(?P<msg>.+)$"
11_skip="^\\\\VO"
12_search="(?<=\\(|,)(?P<msg>[^,)]+)"
sample="""
\\VO(RAS_MAHOEX2_01_0001)(ID:6363)【らすか＠？？？】「〜〜〜〜」"""

; [Yuris_ybn]
; 01_skip="^[^\"]"
; 02_skip="^\"[a-zA-Z0-9]"
; 10_search="^\"(【)(.+?)(】)\""
; 11_search="^\"(.+?)\""
; checkJIS=
; ignoreDecodeError="1"
; separate="\\0"
; sample="""
; <用于提取人名，推荐导出格式为字典>
; """

[U-MeSoft]
01_skip=^$
10_search=^mes\\(\"(?P<name>[^\"]+)\"
11_search=^saveset\\(\"([^\"]+)\"
12_search=^menu\\(.*?\"([^\"]+)\"
13_search=^mesname\\(.*?\"([^\"]+)\"
15_skip=^[^\"]
20_search=^\"(.+)\\$L\"
21_search=^\"(?P<unfinish>.+)\\\\n\"
22_search=^\"(.+)\\\\x0\"

; [WillPlus]
; 01_skip="^%L$|^char\\0$"
; 03_search="^%[A-Z0-9]+(.*?)%[A-Z0-9]+%K"
; 04_search="^(.*?)%K"
; 05_search="^[^\\0](?P<name>.*?)\\0"
; separate="(%L|char\\0)"
; startline=1
; sample="""该正则不能提取选项，要提取选项请从预设引擎中选择"""

; [SystemC]
; 00_skip="^[A-Za-z/\\*\\r]"
; 02_search="^(?P<name>.+?)　（.+?）\\r\\n(?P<unfinish>.+?)\\r\\n(?P<unfinish1>.+?)\\r\\n(.+)$"
; 03_search="^(?P<name>.+?)　（.+?）\\r\\n(?:(?P<unfinish>.+?)\\r\\n){0,1}(.+)$"
; 04_search="^(?P<unfinish>.+?)\\r\\n(?P<unfinish1>.+?)\\r\\n(.+)$"
; 05_search="^(?:(?P<unfinish>.+?)\\r\\n){0,1}(.+)$"
; separate="\\r\\n\\r\\n"
; sample="""
; 男子Ａ　（０００１）
; 「なぁ、男子だけじゃあれだしさぁ……
; 　女子も誘ってみようぜ？」

; <<除名字外最多三行内容>>"""

[_BIN_AdvSys3]
00_skip="^[\\S\\s]{0,3}$"
10_search="^[\\S\\s]{2}(?P<name>【[\\S\\s]+?】)\\x00"
20_search="^[\\S\\s]{2}([\\x81-\\xFC][\\S\\s]+?)\\x00"
separate="(\\x53\\x73)"
preLen=2
addrFix="\\x30\\x00\\x00\\x00\\x00\\x4C([\\S\\s]{3}\\x00)"
sample="""
<preLen表示捕获分组之前记录的长度字节个数，需要符合分组内容的长度>
<addrFix仅影响导入，用于全文件匹配跳转字节，需要separate=(捕获分组)>
"""

[_BIN_Violent]
00_skip="^[\\S\\s]{0,3}$"
10_search="^([\\x81-\\xFC][\\S\\s]+)$"
checkJIS="[\\r\\n]"
ignoreDecodeError="1"
separate="\\x00"
sample="""
<暴力匹配，日文仅允许双字节，单字节符号按正则匹配[\\r\\n]>
"""

; [_JSON_ReplaceSymbol]
; 00_search="([♪・])"
; sample="""{ \"原文\": \"译文\" }"""
; [_JSON_Key]
; 00_skip="^\\s*[\\[\\]\\{\\}]"
; 01_search="^\\s*\"(.*?)\""
; [_TXT_GuessName]
; 00_skip="^[#;/a-zA-Z0-9{]"
;01_search="^(.{1,7}[\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FFF０-９Ａ-Ｚａ-ｚ])$"
; 01_search="^([\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FFF０-９Ａ-Ｚａ-ｚ･]{1,8})$"
[_TXT_TwoLine]
;00_skip="^◇"
01_search="^●.+?●(.+)$"
sample="""
○B000004C○「ふぅ、やっと昼休みか……」
●B000004C●「ふぅ、やっと昼休みか……」"""
[_OutputAll]
00_skip="^$"
20_search="^([\\s\\S]+)$"

[__None]
sample="还原为引擎预设"

[__Custom0]
sample="Custom规则进行提取时会自动保存在config.ini中"
